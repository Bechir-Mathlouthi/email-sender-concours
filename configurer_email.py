"""
Script interactif pour configurer facilement les param√®tres email
"""

import os
import re

def valider_email(email):
    """Valide le format d'un email"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def configurer_email_interactif():
    """Configuration interactive des param√®tres email"""
    print("üîß CONFIGURATION INTERACTIVE DES PARAM√àTRES EMAIL")
    print("=" * 60)
    
    # Demander l'email
    while True:
        email = input("üìß Entrez votre adresse email : ").strip()
        if valider_email(email):
            break
        print("‚ùå Format d'email invalide. Essayez √† nouveau.")
    
    # Demander le mot de passe
    print("\nüîê Mot de passe d'application :")
    print("   Pour Gmail : https://myaccount.google.com/apppasswords")
    print("   Le mot de passe doit faire 16 caract√®res (ex: abcd efgh ijkl mnop)")
    
    while True:
        mot_de_passe = input("üîë Entrez votre mot de passe d'application : ").strip()
        if len(mot_de_passe) >= 8:
            break
        print("‚ùå Le mot de passe semble trop court. V√©rifiez qu'il s'agit bien d'un mot de passe d'application.")
    
    # D√©tecter le serveur SMTP
    if 'gmail.com' in email:
        smtp_server = 'smtp.gmail.com'
        smtp_port = 587
    elif 'outlook.com' in email or 'hotmail.com' in email:
        smtp_server = 'smtp-mail.outlook.com'
        smtp_port = 587
    elif 'yahoo.com' in email:
        smtp_server = 'smtp.mail.yahoo.com'
        smtp_port = 587
    else:
        print(f"\n‚ö†Ô∏è  Serveur SMTP non d√©tect√© automatiquement pour {email}")
        smtp_server = input("üì° Entrez le serveur SMTP (ex: smtp.gmail.com) : ").strip()
        smtp_port = int(input("üîå Entrez le port SMTP (g√©n√©ralement 587) : ").strip() or "587")
    
    print(f"\nüì° Serveur SMTP d√©tect√© : {smtp_server}:{smtp_port}")
    
    # Mode de fonctionnement
    print(f"\nüß™ Mode de fonctionnement :")
    print("   1. Mode TEST (recommand√©) - Envoie seulement 3 emails")
    print("   2. Mode PRODUCTION - Envoie tous les emails")
    
    while True:
        choix = input("Choisissez le mode (1 ou 2) : ").strip()
        if choix in ['1', '2']:
            mode_test = choix == '1'
            break
        print("‚ùå Choisissez 1 ou 2")
    
    # G√©n√©rer le nouveau fichier config.py
    config_content = f'''# Configuration pour l'envoi d'emails
# IMPORTANT: Ne jamais commiter ce fichier avec de vraies informations sensibles

# Configuration Email
EMAIL_CONFIG = {{
    'expediteur': '{email}',
    'mot_de_passe': '{mot_de_passe}',
    'smtp_server': '{smtp_server}',
    'smtp_port': {smtp_port}
}}

# Configuration des fichiers
FICHIER_EXCEL = 'candidats_selectionnes.xlsx'
DOSSIER_PDF = 'pdf_candidats'

# Configuration du PDF
PDF_CONFIG = {{
    'titre': 'Fiche de Candidature',
    'police': 'Arial',
    'taille_police': 12,
    'logo_path': None  # Chemin vers le logo si disponible
}}

# Configuration de l'email
EMAIL_TEMPLATE = {{
    'sujet': 'R√©sultats de votre candidature - Concours',
    'corps': """Bonjour {{nom}},

F√©licitations ! Vous avez √©t√© s√©lectionn√©(e) pour la prochaine √©tape du concours.

Veuillez trouver ci-joint votre fiche de candidature avec vos informations d√©taill√©es.

Nous vous contacterons prochainement pour les √©tapes suivantes.

Cordialement,
Le Service des Ressources Humaines"""
}}

# Colonnes attendues dans le fichier Excel
COLONNES_REQUISES = [
    'Nom',
    'CIN', 
    'Email',
    'Date de naissance',
    'Sp√©cialit√©',
    'Nationalit√©',
    'Score'
]

# Configuration pour les tests
MODE_TEST = {str(mode_test).lower()}  # Mettre √† False pour l'envoi r√©el
NOMBRE_TEST = 3   # Nombre d'emails √† envoyer en mode test'''
    
    # Sauvegarder la configuration
    with open('config.py', 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print(f"\n‚úÖ Configuration sauvegard√©e dans config.py")
    print(f"üìß Email configur√© : {email}")
    print(f"üì° Serveur SMTP : {smtp_server}:{smtp_port}")
    print(f"üß™ Mode : {'TEST' if mode_test else 'PRODUCTION'}")
    
    # Proposer de tester
    print(f"\nüîç Voulez-vous tester la configuration maintenant ?")
    tester = input("Taper 'oui' pour tester : ").strip().lower()
    
    if tester in ['oui', 'o', 'yes', 'y']:
        print(f"\nüß™ Lancement du test...")
        os.system('python test_system.py')
    
    print(f"\nüéâ Configuration termin√©e !")
    print(f"üìù Prochaines √©tapes :")
    print(f"   1. Remplacez les donn√©es dans candidats_selectionnes.xlsx")
    print(f"   2. Lancez : python main.py")

if __name__ == "__main__":
    try:
        configurer_email_interactif()
    except KeyboardInterrupt:
        print(f"\n\n‚ùå Configuration annul√©e")
    except Exception as e:
        print(f"\n‚ùå Erreur : {e}")

